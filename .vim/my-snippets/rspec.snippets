global !p
from snippet_utils import camelcase
endglobal

snippet aft "after { .. }"
after { ${0} }
endsnippet

snippet aftt "after do .. end"
after do
	${0}
end
endsnippet

snippet bef "before { .. }"
before { ${0} }
endsnippet

snippet before "before { .. }"
before { ${0} }
endsnippet

snippet beff "before do .. end"
before do
	${0}
end
endsnippet

snippet co "context 'description' do .. end"
context '${1:description}' do
	${0}
end
endsnippet

snippet con "context 'description' do .. end"
context '${1:description}' do
	${0}
end
endsnippet

snippet cond "context do .. end"
context do
	${0}
end
endsnippet

snippet de "describe do .. end"
describe '${1:description}' do
	${0}
end
endsnippet

snippet des "describe do .. end"
describe '${1:description}' do
	${0}
end
endsnippet

snippet sc "scenario do .. end"
scenario '${1:description}' do
	${0}
end
endsnippet

snippet sce "scenario do .. end"
scenario '${1:description}' do
	${0}
end
endsnippet

snippet ss "scenario do .. end"
scenario '${1:description}' do
	${0}
end
endsnippet

snippet e "expect(..)"
expect(${1}).${0}
endsnippet

snippet ex "expect(..)"
expect(${1}).${0}
endsnippet

snippet x "expect(..)"
expect(${1}).${0}
endsnippet

snippet it "it { .. }"
it { ${0} }
endsnippet

snippet ite "it { expect(..) }"
it { expect(${1}).${0} }
endsnippet

snippet its "its(..) { .. }"
its(:${1}) { should ${0} }
endsnippet

snippet itsh "it { should .. }"
it { should ${0} }
endsnippet

snippet itis "it { is_expected.to .. }"
it { is_expected.to ${0} }
endsnippet

snippet itt "it 'does something' do .. end"
it '${1:does something}' do
	${0}
end
endsnippet

snippet itd "it do .. end"
it do
	${0}
end
endsnippet

snippet let "let(:object) { .. }"
let(:${1:object}) { ${0} }
endsnippet

snippet let! "let!(:object) { .. }"
let!(:${1:object}) { ${0} }
endsnippet

snippet lett "let(:object) do .. end"
let(:${1:object}) do
	${0}
end
endsnippet

snippet lett! "let!(:object) do .. end"
let!(:${1:object}) do
	${0}
end
endsnippet

snippet spec "spec template"
require 'rails_helper'

describe ${1}`!p snip.rv = camelcase(re.sub('_spec$', '', snip.basename))` do
	${0}
end
endsnippet

snippet sub "subject"
subject(:`!p snip.rv = re.sub('_spec$', '', snip.basename)`) { ${0} }
endsnippet
